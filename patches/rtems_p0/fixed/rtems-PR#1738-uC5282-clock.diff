Index: c/src/lib/libbsp/m68k/uC5282/clock/clock.c
===================================================================
RCS file: /usr1/CVS/rtems/c/src/lib/libbsp/m68k/uC5282/clock/clock.c,v
retrieving revision 1.16
diff -c -r1.16 clock.c
*** c/src/lib/libbsp/m68k/uC5282/clock/clock.c	26 Aug 2009 13:32:22 -0000	1.16
--- c/src/lib/libbsp/m68k/uC5282/clock/clock.c	22 Feb 2011 18:09:34 -0000
***************
*** 26,44 ****
   * CPU load counters
   * Place in static RAM so updates don't hit the SDRAM
   */
! extern int __SRAMBASE[];
! #define IDLE_COUNTER      __SRAMBASE[0]
! #define FILTERED_IDLE     __SRAMBASE[1]
! #define MAX_IDLE_COUNT    __SRAMBASE[2]
! #define USEC_PER_TICK     __SRAMBASE[3]
  #define FILTER_SHIFT    6
  
  uint32_t bsp_clock_nanoseconds_since_last_tick(void)
  {
      int i = MCF5282_PIT3_PCNTR;
      if (MCF5282_PIT3_PCSR & MCF5282_PIT_PCSR_PIF)
!         i = MCF5282_PIT3_PCNTR - USEC_PER_TICK;
!     return (USEC_PER_TICK - i) * 1000;
  }
  
  #define Clock_driver_nanoseconds_since_last_tick bsp_clock_nanoseconds_since_last_tick
--- 26,44 ----
   * CPU load counters
   * Place in static RAM so updates don't hit the SDRAM
   */
! #define IDLE_COUNTER    __SRAMBASE.idle_counter
! #define FILTERED_IDLE   __SRAMBASE.filtered_idle
! #define MAX_IDLE_COUNT  __SRAMBASE.max_idle_count
! #define PITC_PER_TICK   __SRAMBASE.pitc_per_tick
! #define NSEC_PER_PITC   __SRAMBASE.nsec_per_pitc
  #define FILTER_SHIFT    6
  
  uint32_t bsp_clock_nanoseconds_since_last_tick(void)
  {
      int i = MCF5282_PIT3_PCNTR;
      if (MCF5282_PIT3_PCSR & MCF5282_PIT_PCSR_PIF)
!         i = MCF5282_PIT3_PCNTR - PITC_PER_TICK;
!     return (PITC_PER_TICK - i) * NSEC_PER_PITC;
  }
  
  #define Clock_driver_nanoseconds_since_last_tick bsp_clock_nanoseconds_since_last_tick
***************
*** 48,54 ****
   */
  #define Clock_driver_support_at_tick()                                       \
      do {                                                                     \
!         int idle = IDLE_COUNTER;                                             \
          IDLE_COUNTER = 0;                                                    \
          if (idle > MAX_IDLE_COUNT)                                           \
              MAX_IDLE_COUNT = idle;                                           \
--- 48,54 ----
   */
  #define Clock_driver_support_at_tick()                                       \
      do {                                                                     \
!         unsigned idle = IDLE_COUNTER;                                        \
          IDLE_COUNTER = 0;                                                    \
          if (idle > MAX_IDLE_COUNT)                                           \
              MAX_IDLE_COUNT = idle;                                           \
***************
*** 75,94 ****
  /*
   * Set up the clock hardware
   *
!  * Prescale so that it counts in microseconds
!  * System clock frequency better be 2**n (1<=n<=16) MHz!
   */
  #define Clock_driver_support_initialize_hardware()                       \
      do {                                                                 \
          int level;                                                       \
!         int preScaleCode = -2;                                           \
!         int preScaleDivisor = bsp_get_CPU_clock_speed() / 1000000;       \
!         while (preScaleDivisor) {                                        \
!             preScaleDivisor >>= 1;                                       \
!             preScaleCode++;                                              \
!         }                                                                \
!         IDLE_COUNTER = 0;                                                \
!         FILTERED_IDLE = 0;                                               \
          MAX_IDLE_COUNT = 0;                                              \
          bsp_allocate_interrupt(PIT3_IRQ_LEVEL, PIT3_IRQ_PRIORITY);       \
          MCF5282_INTC0_ICR58 = MCF5282_INTC_ICR_IL(PIT3_IRQ_LEVEL) |      \
--- 75,105 ----
  /*
   * Set up the clock hardware
   *
!  * f_pit = f_clk / 2^(preScaleCode+1) / N  = 1/(us_per_tick/us_per_s)
!  *
!  * N = f_clk / 2^(preScaleCode+1) * us_per_tick / us_per_s
!  *
!  * ns_per_pit_clk = ns_per_s / (f_clk / 2^(preScaleCode+1))
!  *                = ns_per_s * 2^(preScaleCode+1) / f_clk;
   */
  #define Clock_driver_support_initialize_hardware()                       \
      do {                                                                 \
+ 		unsigned long long N;                                            \
          int level;                                                       \
!         int preScaleCode = 0;                                            \
! 		N  = bsp_get_CPU_clock_speed();                                  \
! 		N *= rtems_configuration_get_microseconds_per_tick();            \
! 		N /= 2*1000000; /* min_prescale * us_per_s */                    \
! 		while ( N > 0x10000 ) {                                          \
! 			preScaleCode++;                                              \
! 			N >>= 1;                                                     \
! 		}                                                                \
! 		PITC_PER_TICK  = N;                                              \
! 		N  = 2000000000ULL << preScaleCode;                              \
! 		N /= bsp_get_CPU_clock_speed();                                  \
! 		NSEC_PER_PITC  = N;                                              \
!         IDLE_COUNTER   = 0;                                              \
!         FILTERED_IDLE  = 0;                                              \
          MAX_IDLE_COUNT = 0;                                              \
          bsp_allocate_interrupt(PIT3_IRQ_LEVEL, PIT3_IRQ_PRIORITY);       \
          MCF5282_INTC0_ICR58 = MCF5282_INTC_ICR_IL(PIT3_IRQ_LEVEL) |      \
***************
*** 101,108 ****
                              MCF5282_PIT_PCSR_OVW |                       \
                              MCF5282_PIT_PCSR_PIE |                       \
                              MCF5282_PIT_PCSR_RLD;                        \
!         USEC_PER_TICK = rtems_configuration_get_microseconds_per_tick(); \
!         MCF5282_PIT3_PMR = USEC_PER_TICK - 1;                            \
          MCF5282_PIT3_PCSR = MCF5282_PIT_PCSR_PRE(preScaleCode) |         \
                              MCF5282_PIT_PCSR_PIE |                       \
                              MCF5282_PIT_PCSR_RLD |                       \
--- 112,118 ----
                              MCF5282_PIT_PCSR_OVW |                       \
                              MCF5282_PIT_PCSR_PIE |                       \
                              MCF5282_PIT_PCSR_RLD;                        \
!         MCF5282_PIT3_PMR = PITC_PER_TICK - 1;                            \
          MCF5282_PIT3_PCSR = MCF5282_PIT_PCSR_PRE(preScaleCode) |         \
                              MCF5282_PIT_PCSR_PIE |                       \
                              MCF5282_PIT_PCSR_RLD |                       \
***************
*** 115,121 ****
  Thread bsp_idle_thread(uint32_t ignored)
  {
      for(;;)
!         asm volatile ("addq.l #1,__SRAMBASE"); /* Atomic increment */
  }
  
  int rtems_bsp_cpu_load_percentage(void)
--- 125,131 ----
  Thread bsp_idle_thread(uint32_t ignored)
  {
      for(;;)
!         asm volatile ("addq.l #1,%0"::"m"(IDLE_COUNTER)); /* Atomic increment */
  }
  
  int rtems_bsp_cpu_load_percentage(void)
Index: c/src/lib/libbsp/m68k/uC5282/include/bsp.h
===================================================================
RCS file: /usr1/CVS/rtems/c/src/lib/libbsp/m68k/uC5282/include/bsp.h,v
retrieving revision 1.25
diff -c -r1.25 bsp.h
*** c/src/lib/libbsp/m68k/uC5282/include/bsp.h	29 Nov 2009 14:59:41 -0000	1.25
--- c/src/lib/libbsp/m68k/uC5282/include/bsp.h	22 Feb 2011 18:09:34 -0000
***************
*** 134,139 ****
--- 134,164 ----
  void *bsp_idle_thread( uintptr_t ignored );
  #define BSP_IDLE_TASK_BODY bsp_idle_thread
  
+ /*
+  * SRAM. The BSP uses SRAM for maintaining some clock-driver data
+  *       and for ethernet descriptors (and the initial stack during
+  *       early boot).
+  */
+ 
+ typedef struct mcf5282BufferDescriptor_ {
+     volatile uint16_t   status;
+     uint16_t			length;
+     volatile void      *buffer;
+ } mcf5282BufferDescriptor_t;
+ 
+ extern struct {
+ 	uint32_t                  idle_counter;
+ 	uint32_t                  filtered_idle;
+ 	uint32_t                  max_idle_count;
+ 	uint32_t                  pitc_per_tick;
+ 	uint32_t                  nsec_per_pitc;
+ 	uint32_t                  pad[3]; /* align to 16-bytes for descriptors */
+ 	mcf5282BufferDescriptor_t fec_descriptors[];
+ 	/* buffer descriptors are allocated from here */
+ 
+     /* initial stack is at top of SRAM (start.S)  */
+ } __SRAMBASE;
+ 
  #ifdef __cplusplus
  }
  #endif
Index: c/src/lib/libbsp/m68k/uC5282/network/network.c
===================================================================
RCS file: /usr1/CVS/rtems/c/src/lib/libbsp/m68k/uC5282/network/network.c,v
retrieving revision 1.30
diff -c -r1.30 network.c
*** c/src/lib/libbsp/m68k/uC5282/network/network.c	27 Apr 2010 18:23:44 -0000	1.30
--- c/src/lib/libbsp/m68k/uC5282/network/network.c	22 Feb 2011 18:09:35 -0000
***************
*** 81,92 ****
      #error "Driver must have MCLBYTES > RBUF_SIZE"
  #endif
  
- typedef struct mcf5282BufferDescriptor_ {
-     volatile uint16_t   status;
-     uint16_t			length;
-     volatile void      *buffer;
- } mcf5282BufferDescriptor_t;
- 
  /*
   * Per-device data
   */
--- 81,86 ----
***************
*** 198,207 ****
   * Allow some space at the beginning for other diagnostic counters
   */
  static mcf5282BufferDescriptor_t *
  mcf5282_bd_allocate(unsigned int count)
  {
!     extern char __SRAMBASE[];
!     static mcf5282BufferDescriptor_t *bdp = (mcf5282BufferDescriptor_t *)(__SRAMBASE+16);
      mcf5282BufferDescriptor_t *p = bdp;
  
      bdp += count;
--- 192,200 ----
   * Allow some space at the beginning for other diagnostic counters
   */
  static mcf5282BufferDescriptor_t *
  mcf5282_bd_allocate(unsigned int count)
  {
!     static mcf5282BufferDescriptor_t *bdp = __SRAMBASE.fec_descriptors;
      mcf5282BufferDescriptor_t *p = bdp;
  
      bdp += count;
